import talib
import numpy as np
import MetaTrader5 as mt5
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
SYMBOL = "EURUSD"
TIMEFRAME = mt5.TIMEFRAME_M30
CANDLES_COUNT = 250
MIN_ATR = 0.0008  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏

# –ö—ç—à –¥–ª—è —Å–≤–µ—á–µ–π (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑)
_last_candles_time = 0
_cached_candles = None
CACHE_DURATION = 1800  # 30 –º–∏–Ω—É—Ç


def get_market_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global _last_candles_time, _cached_candles
    
    current_time = mt5.symbol_info_tick(SYMBOL).time
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
    if (_cached_candles is not None and 
        current_time - _last_candles_time < CACHE_DURATION):
        return _cached_candles
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    rates = mt5.copy_rates_from_pos(SYMBOL, TIMEFRAME, 0, CANDLES_COUNT)
    if rates is None or len(rates) == 0:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
        return None
    
    _cached_candles = {
        'open': np.array([candle['open'] for candle in rates]),
        'high': np.array([candle['high'] for candle in rates]),
        'low': np.array([candle['low'] for candle in rates]),
        'close': np.array([candle['close'] for candle in rates]),
        'volume': np.array([candle['tick_volume'] for candle in rates])
    }
    _last_candles_time = current_time
    
    return _cached_candles


def calculate_indicators(data):
    """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        indicators = {}
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        indicators['ema10'] = talib.EMA(data['close'], timeperiod=10)
        indicators['ema21'] = talib.EMA(data['close'], timeperiod=21)
        indicators['sma50'] = talib.SMA(data['close'], timeperiod=50)
        
        # MACD
        macd, macdsignal, macdhist = talib.MACD(
            data['close'], fastperiod=12, slowperiod=26, signalperiod=9
        )
        indicators['macd'] = macd
        indicators['macd_signal'] = macdsignal
        indicators['macd_hist'] = macdhist
        
        # RSI
        indicators['rsi'] = talib.RSI(data['close'], timeperiod=14)
        indicators['rsi_fast'] = talib.RSI(data['close'], timeperiod=7)
        
        # Stochastic
        slowk, slowd = talib.STOCH(
            data['high'], data['low'], data['close'],
            fastk_period=14, slowk_period=3, slowk_matype=0,
            slowd_period=3, slowd_matype=0
        )
        indicators['stoch_k'] = slowk
        indicators['stoch_d'] = slowd
        
        # ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        indicators['atr'] = talib.ATR(data['high'], data['low'], data['close'], timeperiod=14)
        
        # Bollinger Bands
        bb_upper, bb_middle, bb_lower = talib.BBANDS(
            data['close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0
        )
        indicators['bb_upper'] = bb_upper
        indicators['bb_middle'] = bb_middle
        indicators['bb_lower'] = bb_lower
        
        # Williams %R
        indicators['williams_r'] = talib.WILLR(
            data['high'], data['low'], data['close'], timeperiod=14
        )
        
        return indicators
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return None


def check_trend_alignment(indicators):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    bullish_signals = 0
    bearish_signals = 0
    
    # EMA —Ç—Ä–µ–Ω–¥ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è > –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è)
    if indicators['ema10'][-1] > indicators['ema21'][-1]:
        bullish_signals += 1
    elif indicators['ema10'][-1] < indicators['ema21'][-1]:
        bearish_signals += 1
    
    # –¶–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ SMA50
    current_price = indicators['ema10'][-1]  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    if current_price > indicators['sma50'][-1]:
        bullish_signals += 1
    elif current_price < indicators['sma50'][-1]:
        bearish_signals += 1
    
    # MACD –∏–º–ø—É–ª—å—Å
    if indicators['macd_hist'][-1] > 0:
        bullish_signals += 1
    elif indicators['macd_hist'][-1] < 0:
        bearish_signals += 1
    
    return bullish_signals, bearish_signals


def check_momentum_oscillators(indicators):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–æ–≤"""
    bullish_signals = 0
    bearish_signals = 0
    
    # RSI
    rsi_current = indicators['rsi'][-1]
    if 30 < rsi_current < 70:  # –Ω–µ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–∞—Ö
        if rsi_current > 55:
            bullish_signals += 1
        elif rsi_current < 45:
            bearish_signals += 1
    
    # –ë—ã—Å—Ç—Ä—ã–π RSI
    rsi_fast = indicators['rsi_fast'][-1]
    if rsi_fast > 60:
        bullish_signals += 1
    elif rsi_fast < 40:
        bearish_signals += 1
    
    # Stochastic
    stoch_k = indicators['stoch_k'][-1]
    stoch_d = indicators['stoch_d'][-1]
    
    if stoch_k > stoch_d and stoch_k > 50:
        bullish_signals += 1
    elif stoch_k < stoch_d and stoch_k < 50:
        bearish_signals += 1
    
    # Williams %R
    williams = indicators['williams_r'][-1]
    if williams > -50:
        bullish_signals += 1
    elif williams < -50:
        bearish_signals += 1
    
    return bullish_signals, bearish_signals


def check_volatility_filter(indicators):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    atr_current = indicators['atr'][-1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    if atr_current < MIN_ATR:
        return False, "–ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è (–∏–∑–±–µ–≥–∞–µ–º –Ω–æ–≤–æ—Å—Ç–µ–π)
    atr_avg = np.mean(indicators['atr'][-10:])  # —Å—Ä–µ–¥–Ω—è—è –∑–∞ 10 –ø–µ—Ä–∏–æ–¥–æ–≤
    if atr_current > atr_avg * 2:
        return False, "–ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
    
    return True, f"ATR: {atr_current:.5f}"


def get_signal():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    
    –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
    1. –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø—É–ª—å—Å–Ω—ã–µ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã
    5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    6. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        market_data = get_market_data()
        if market_data is None:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        if len(market_data['close']) < 100:
            logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = calculate_indicators(market_data)
        if indicators is None:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        required_indicators = ['ema10', 'ema21', 'macd_hist', 'rsi', 'stoch_k', 'stoch_d', 'atr']
        for indicator in required_indicators:
            if np.isnan(indicators[indicator][-1]):
                logging.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {indicator}")
                return None
        
        # –§–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility_ok, vol_msg = check_volatility_filter(indicators)
        if not volatility_ok:
            logging.info(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {vol_msg}")
            return None
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        trend_bullish, trend_bearish = check_trend_alignment(indicators)
        
        # –ê–Ω–∞–ª–∏–∑ –∏–º–ø—É–ª—å—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        momentum_bullish, momentum_bearish = check_momentum_oscillators(indicators)
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        total_bullish = trend_bullish + momentum_bullish
        total_bearish = trend_bearish + momentum_bearish
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        logging.info(
            f"–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ - "
            f"–ë—ã—á—å–∏: {total_bullish} (—Ç—Ä–µ–Ω–¥: {trend_bullish}, –∏–º–ø—É–ª—å—Å: {momentum_bullish}), "
            f"–ú–µ–¥–≤–µ–∂—å–∏: {total_bearish} (—Ç—Ä–µ–Ω–¥: {trend_bearish}, –∏–º–ø—É–ª—å—Å: {momentum_bearish}), "
            f"RSI: {indicators['rsi'][-1]:.2f}, "
            f"Stoch: {indicators['stoch_k'][-1]:.2f}, "
            f"{vol_msg}"
        )
        
        # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 4 —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ 7 –≤–æ–∑–º–æ–∂–Ω—ã—Ö)
        min_signals = 4
        
        if total_bullish >= min_signals and total_bullish > total_bearish:
            logging.info(f"üü¢ –°–ò–ì–ù–ê–õ: BUY (—Å–∏–ª–∞: {total_bullish}/{total_bullish + total_bearish})")
            return 'buy'
        elif total_bearish >= min_signals and total_bearish > total_bullish:
            logging.info(f"üî¥ –°–ò–ì–ù–ê–õ: SELL (—Å–∏–ª–∞: {total_bearish}/{total_bullish + total_bearish})")
            return 'sell'
        else:
            logging.info("‚ö™ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            return None
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}", exc_info=True)
        return None


def get_signal_strength():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    market_data = get_market_data()
    if market_data is None:
        return None
    
    indicators = calculate_indicators(market_data)
    if indicators is None:
        return None
    
    trend_bullish, trend_bearish = check_trend_alignment(indicators)
    momentum_bullish, momentum_bearish = check_momentum_oscillators(indicators)
    
    return {
        'trend_bullish': trend_bullish,
        'trend_bearish': trend_bearish,
        'momentum_bullish': momentum_bullish,
        'momentum_bearish': momentum_bearish,
        'rsi': indicators['rsi'][-1],
        'macd_hist': indicators['macd_hist'][-1],
        'atr': indicators['atr'][-1]
    }