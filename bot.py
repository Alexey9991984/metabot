from strategy import get_signal
from datetime import datetime
import numpy as np
import os
import time
import requests
import MetaTrader5 as mt5
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="bot_log.txt",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
MT5_LOGIN = int(os.getenv("MT5_LOGIN", 0))
MT5_PASSWORD = os.getenv("MT5_PASSWORD")
MT5_SERVER = os.getenv("MT5_SERVER")

SYMBOL = "EURUSD"
LOT = 0.10
TIMEFRAME = mt5.TIMEFRAME_M30
POSITION_TYPE = None

mt5.symbol_select(SYMBOL, True)


def send_telegram_message(message):
    print(f"[Telegram] {message}")
    if not TELEGRAM_TOKEN or not CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        requests.get(url, params={"chat_id": CHAT_ID, "text": message})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Telegram: {e}")


def initialize_mt5():
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MetaTrader 5...")
    if not mt5.initialize(login=MT5_LOGIN, password=MT5_PASSWORD, server=MT5_SERVER):
        msg = f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5: {mt5.last_error()}"
        send_telegram_message(msg)
        raise RuntimeError(msg)
    print("‚úÖ MetaTrader 5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    send_telegram_message("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")


def get_candles(symbol=SYMBOL, timeframe=TIMEFRAME, n=250):
    rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, n)
    if rates is None or len(rates) == 0:
        send_telegram_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π")
        return []
    return np.array(rates)['close']


def close_open_positions():
    positions = mt5.positions_get(symbol=SYMBOL)
    if not positions:
        return

    tick = mt5.symbol_info_tick(SYMBOL)
    if not tick or tick.bid == 0 or tick.ask == 0:
        send_telegram_message("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")
        return

    for pos in positions:
        order_type = mt5.ORDER_TYPE_SELL if pos.type == mt5.POSITION_TYPE_BUY else mt5.ORDER_TYPE_BUY
        price = tick.bid if order_type == mt5.ORDER_TYPE_SELL else tick.ask

        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": SYMBOL,
            "volume": pos.volume,
            "type": order_type,
            "position": pos.ticket,
            "price": price,
            "deviation": 50,
            "magic": 123456,
            "comment": "Auto close",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }

        result = mt5.order_send(request)
        if result.retcode == mt5.TRADE_RETCODE_DONE:
            send_telegram_message("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
        else:
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {result.comment}")


def open_trade(signal):
    lot = LOT
    symbol_info = mt5.symbol_info(SYMBOL)
    if symbol_info is None:
        send_telegram_message(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {SYMBOL}")
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {SYMBOL}")
        return False

    min_vol = symbol_info.volume_min
    max_vol = symbol_info.volume_max
    step_vol = symbol_info.volume_step

    if (
        lot < min_vol
        or lot > max_vol
        or round((lot - min_vol) / step_vol) * step_vol + min_vol - lot > 1e-8
    ):
        send_telegram_message(
            f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ–±—ä—ë–º —Å–¥–µ–ª–∫–∏: {lot}. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç {min_vol} –¥–æ {max_vol} —Å —à–∞–≥–æ–º {step_vol}"
        )
        logging.error(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–º: {lot} (min={min_vol}, max={max_vol}, step={step_vol})"
        )
        return False

    tick = mt5.symbol_info_tick(SYMBOL)
    if tick is None:
        send_telegram_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–∏–∫–µ—Ä–∞")
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–∏–∫–µ—Ä–∞")
        return False

    price = tick.ask if signal == 'buy' else tick.bid
    sl = price - 0.0015 if signal == 'buy' else price + 0.0015
    tp = price + 0.0015 if signal == 'buy' else price - 0.0015
    deviation = 10
    order_type = mt5.ORDER_TYPE_BUY if signal == 'buy' else mt5.ORDER_TYPE_SELL

    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": SYMBOL,
        "volume": lot,
        "type": order_type,
        "price": price,
        "sl": sl,
        "tp": tp,
        "deviation": deviation,
        "magic": 123456,
        "comment": "Python script open",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }

    result = mt5.order_send(request)

    if result.retcode != mt5.TRADE_RETCODE_DONE:
        send_telegram_message(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {result.retcode}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.retcode}")
        return False
    else:
        send_telegram_message(
            f"‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {signal.upper()} {SYMBOL} –ø–æ —Ü–µ–Ω–µ {price}")
        logging.info(
            f"–°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {signal.upper()} {SYMBOL} –ø–æ —Ü–µ–Ω–µ {price}")
        return True


def strategy():
    close_prices = get_candles()
    if len(close_prices) < 200:
        return None
    return get_signal(close_prices)


def run():
    global POSITION_TYPE
    try:
        initialize_mt5()

        last_ping_time = time.time()  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–∏–Ω–≥–∞

        while True:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
            positions = mt5.positions_get(symbol=SYMBOL)
            if not positions:
                POSITION_TYPE = None
            else:
                POSITION_TYPE = "buy" if positions[0].type == mt5.POSITION_TYPE_BUY else "sell"

            # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å
            if time.time() - last_ping_time >= 3600:
                now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                send_telegram_message(f"‚úÖ –ë–æ—Ç –∂–∏–≤. –í—Ä–µ–º—è: {now}")
                last_ping_time = time.time()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Å 6:00 –¥–æ 22:00)
            current_hour = datetime.now().hour
            if 6 <= current_hour < 22:
                signal = strategy()

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                logging.info(
                    f"üîç –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal}, –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {POSITION_TYPE}")

            if signal and signal != POSITION_TYPE:
                logging.info(
                    "üìà –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏. –ó–∞–∫—Ä—ã—Ç–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏...")
                close_open_positions()
                if open_trade(signal):
                    POSITION_TYPE = signal
                    logging.info(f"‚úÖ –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {POSITION_TYPE}")
                else:
                    logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é.")
            else:
                logging.info(
                    "üåô –í–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å 22:00 –¥–æ 6:00). –û–∂–∏–¥–∞–Ω–∏–µ...")

            if signal and signal != POSITION_TYPE:
                logging.info(
                    "üìà –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏. –ó–∞–∫—Ä—ã—Ç–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏...")
                close_open_positions()
                if open_trade(signal):
                    POSITION_TYPE = signal
                    logging.info(f"‚úÖ –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {POSITION_TYPE}")
                else:
                    logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é.")
            time.sleep(10)

    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        logging.error(error_msg, exc_info=True)
        send_telegram_message(error_msg)
        time.sleep(60)


if __name__ == "__main__":
    run()
