from strategy import get_signal
from datetime import datetime, time as dt_time
import numpy as np
import os
import time
import requests
import MetaTrader5 as mt5
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="bot_log.txt",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
MT5_LOGIN = int(os.getenv("MT5_LOGIN", 0))
MT5_PASSWORD = os.getenv("MT5_PASSWORD")
MT5_SERVER = os.getenv("MT5_SERVER")

SYMBOL = "EURUSD"
LOT = 0.10
TIMEFRAME = mt5.TIMEFRAME_M30
POSITION_TYPE = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
RISK_PERCENT = 1.0          # –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
USE_TRAILING_STOP = True    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
USE_PARTIAL_CLOSE = True    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
PARTIAL_CLOSE_PIPS = 30     # –ü—Ä–∏ —Å–∫–æ–ª—å–∫–∏—Ö –ø–∏–ø—Å–∞—Ö –∑–∞–∫—Ä—ã–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ

# –¢–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã (GMT)
TRADING_START = dt_time(6, 0)   # 06:00
TRADING_END = dt_time(22, 0)    # 22:00
PING_INTERVAL = 10800  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    print(f"[Telegram] {message}")
    if not TELEGRAM_TOKEN or not CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        requests.get(url, params={"chat_id": CHAT_ID, "text": message}, timeout=10)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")


def initialize_mt5():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MT5"""
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MetaTrader 5...")
    if not mt5.initialize(login=MT5_LOGIN, password=MT5_PASSWORD, server=MT5_SERVER):
        msg = f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5: {mt5.last_error()}"
        send_telegram_message(msg)
        raise RuntimeError(msg)
    
    # –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞
    if not mt5.symbol_select(SYMBOL, True):
        msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª {SYMBOL}"
        send_telegram_message(msg)
        raise RuntimeError(msg)
    
    print("‚úÖ MetaTrader 5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    send_telegram_message("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")


def is_trading_time():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö"""
    now = datetime.now()
    current_time = now.time()
    weekday = now.weekday()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö (—Å—É–±–±–æ—Ç–∞=5, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
    if weekday >= 5:
        return False
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤
    return TRADING_START <= current_time < TRADING_END


def get_current_position():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
    positions = mt5.positions_get(symbol=SYMBOL)
    if not positions:
        return None
    return "buy" if positions[0].type == mt5.POSITION_TYPE_BUY else "sell"


def close_open_positions():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    positions = mt5.positions_get(symbol=SYMBOL)
    if not positions:
        return True

    tick = mt5.symbol_info_tick(SYMBOL)
    if not tick or tick.bid == 0 or tick.ask == 0:
        send_telegram_message("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")
        return False

    success = True
    for pos in positions:
        order_type = mt5.ORDER_TYPE_SELL if pos.type == mt5.POSITION_TYPE_BUY else mt5.ORDER_TYPE_BUY
        price = tick.bid if order_type == mt5.ORDER_TYPE_SELL else tick.ask

        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": SYMBOL,
            "volume": pos.volume,
            "type": order_type,
            "position": pos.ticket,
            "price": price,
            "deviation": 50,
            "magic": 123456,
            "comment": "Auto close",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }

        result = mt5.order_send(request)
        if result.retcode == mt5.TRADE_RETCODE_DONE:
            send_telegram_message("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
            logging.info(f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {pos.ticket}")
        else:
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {result.comment}")
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {pos.ticket}: {result.comment}")
            success = False
    
    return success


def validate_lot_size():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ—Ç–∞"""
    symbol_info = mt5.symbol_info(SYMBOL)
    if symbol_info is None:
        return False, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {SYMBOL}"

    min_vol = symbol_info.volume_min
    max_vol = symbol_info.volume_max
    step_vol = symbol_info.volume_step

    if (LOT < min_vol or LOT > max_vol or 
        round((LOT - min_vol) / step_vol) * step_vol + min_vol - LOT > 1e-8):
        return False, f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ–±—ä—ë–º —Å–¥–µ–ª–∫–∏: {LOT}. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç {min_vol} –¥–æ {max_vol} —Å —à–∞–≥–æ–º {step_vol}"
    
    return True, ""


def calculate_dynamic_sl_tp(signal, entry_price, atr_value):
    """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR"""
    # –ë–∞–∑–æ–≤—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ ATR
    sl_atr_multiplier = 1.5  # –°—Ç–æ–ø-–ª–æ—Å—Å = 1.5 * ATR
    tp_atr_multiplier = 2.5  # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç = 2.5 * ATR
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤ –ø–∏–ø—Å–∞—Ö –¥–ª—è EURUSD)
    min_sl_pips = 15  # –º–∏–Ω–∏–º—É–º 15 –ø–∏–ø—Å–æ–≤
    max_sl_pips = 50  # –º–∞–∫—Å–∏–º—É–º 50 –ø–∏–ø—Å–æ–≤
    min_tp_pips = 20  # –º–∏–Ω–∏–º—É–º 20 –ø–∏–ø—Å–æ–≤
    max_tp_pips = 80  # –º–∞–∫—Å–∏–º—É–º 80 –ø–∏–ø—Å–æ–≤
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∏–ø—Å–æ–≤ –≤ —Ü–µ–Ω—É –¥–ª—è EURUSD (1 –ø–∏–ø = 0.0001)
    pip_value = 0.0001
    
    # –†–∞—Å—á–µ—Ç SL –∏ TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
    atr_sl_distance = atr_value * sl_atr_multiplier
    atr_tp_distance = atr_value * tp_atr_multiplier
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    sl_distance = max(min_sl_pips * pip_value, min(atr_sl_distance, max_sl_pips * pip_value))
    tp_distance = max(min_tp_pips * pip_value, min(atr_tp_distance, max_tp_pips * pip_value))
    
    if signal == 'buy':
        sl = entry_price - sl_distance
        tp = entry_price + tp_distance
    else:  # sell
        sl = entry_price + sl_distance
        tp = entry_price - tp_distance
    
    return sl, tp, sl_distance / pip_value, tp_distance / pip_value


def get_current_atr():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ATR"""
    try:
        from strategy import get_market_data, calculate_indicators
        
        market_data = get_market_data()
        if market_data is None:
            return 0.0020  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        indicators = calculate_indicators(market_data)
        if indicators is None or np.isnan(indicators['atr'][-1]):
            return 0.0020  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        return indicators['atr'][-1]
    except:
        return 0.0020  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


def open_trade(signal, risk_percent=1.0):
    """
    –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ SL/TP
    
    Args:
        signal: 'buy' –∏–ª–∏ 'sell'
        risk_percent: –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1%)
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ—Ç–∞
    is_valid, error_msg = validate_lot_size()
    if not is_valid:
        send_telegram_message(error_msg)
        logging.error(error_msg)
        return False

    tick = mt5.symbol_info_tick(SYMBOL)
    if tick is None:
        send_telegram_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–∏–∫–µ—Ä–∞")
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–∏–∫–µ—Ä–∞")
        return False

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
    current_atr = get_current_atr()
    
    price = tick.ask if signal == 'buy' else tick.bid
    sl, tp, sl_pips, tp_pips = calculate_dynamic_sl_tp(signal, price, current_atr)
    
    order_type = mt5.ORDER_TYPE_BUY if signal == 'buy' else mt5.ORDER_TYPE_SELL

    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": SYMBOL,
        "volume": LOT,
        "type": order_type,
        "price": price,
        "sl": sl,
        "tp": tp,
        "deviation": 10,
        "magic": 123456,
        "comment": f"Bot {signal} ATR-based",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }

    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {result.retcode} - {result.comment}"
        send_telegram_message(error_msg)
        logging.error(error_msg)
        return False
    else:
        rr_ratio = tp_pips / sl_pips  # Risk-Reward —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        success_msg = (f"‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {signal.upper()} {SYMBOL}\n"
                      f"üí∞ –¶–µ–Ω–∞: {price:.5f}\n"
                      f"üõë SL: {sl:.5f} (-{sl_pips:.1f} –ø–∏–ø—Å–æ–≤)\n"
                      f"üéØ TP: {tp:.5f} (+{tp_pips:.1f} –ø–∏–ø—Å–æ–≤)\n"
                      f"üìä R/R: 1:{rr_ratio:.1f}\n"
                      f"üìà ATR: {current_atr:.5f}")
        
        send_telegram_message(success_msg)
        logging.info(f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {signal.upper()}: –≤—Ö–æ–¥={price:.5f}, SL={sl:.5f} ({sl_pips:.1f}–ø), TP={tp:.5f} ({tp_pips:.1f}–ø), R/R=1:{rr_ratio:.1f}")
        return True


def update_trailing_stop():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    positions = mt5.positions_get(symbol=SYMBOL)
    if not positions:
        return

    current_atr = get_current_atr()
    trailing_distance = current_atr * 1.0  # –¢—Ä–µ–π–ª–∏–Ω–≥ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è = 1 ATR
    min_trailing_pips = 10  # –ú–∏–Ω–∏–º—É–º 10 –ø–∏–ø—Å–æ–≤
    pip_value = 0.0001
    
    trailing_distance = max(trailing_distance, min_trailing_pips * pip_value)

    for pos in positions:
        try:
            tick = mt5.symbol_info_tick(SYMBOL)
            if not tick:
                continue

            current_price = tick.bid if pos.type == mt5.POSITION_TYPE_BUY else tick.ask
            current_sl = pos.sl
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π SL
            if pos.type == mt5.POSITION_TYPE_BUY:
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏: –Ω–æ–≤—ã–π SL –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ
                new_sl = current_price - trailing_distance
                should_update = new_sl > current_sl and new_sl < current_price
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: –Ω–æ–≤—ã–π SL –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ  
                new_sl = current_price + trailing_distance
                should_update = new_sl < current_sl and new_sl > current_price

            if should_update:
                # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
                request = {
                    "action": mt5.TRADE_ACTION_SLTP,
                    "symbol": SYMBOL,
                    "position": pos.ticket,
                    "sl": new_sl,
                    "tp": pos.tp,  # –û—Å—Ç–∞–≤–ª—è–µ–º TP –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                }
                
                result = mt5.order_send(request)
                if result.retcode == mt5.TRADE_RETCODE_DONE:
                    move_pips = abs(new_sl - current_sl) / pip_value
                    direction = "BUY" if pos.type == mt5.POSITION_TYPE_BUY else "SELL"
                    msg = f"üîÑ –¢—Ä–µ–π–ª–∏–Ω–≥ SL –æ–±–Ω–æ–≤–ª–µ–Ω ({direction}): {current_sl:.5f} ‚Üí {new_sl:.5f} (+{move_pips:.1f} –ø–∏–ø—Å–æ–≤)"
                    send_telegram_message(msg)
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–π–ª–∏–Ω–≥ SL –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {pos.ticket}: {new_sl:.5f}")
                else:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å SL –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {pos.ticket}: {result.comment}")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ SL –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {pos.ticket}: {e}")


def check_partial_close():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π"""
    positions = mt5.positions_get(symbol=SYMBOL)
    if not positions:
        return

    for pos in positions:
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å –≤ –ø–∏–ø—Å–∞—Ö
            tick = mt5.symbol_info_tick(SYMBOL)
            if not tick:
                continue
                
            pip_value = 0.0001
            current_price = tick.bid if pos.type == mt5.POSITION_TYPE_BUY else tick.ask
            
            if pos.type == mt5.POSITION_TYPE_BUY:
                profit_pips = (current_price - pos.price_open) / pip_value
            else:
                profit_pips = (pos.price_open - current_price) / pip_value
            
            # –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –±–æ–ª—å—à–µ 30 –ø–∏–ø—Å–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –±—ã–ª–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞
            if profit_pips > 30 and pos.volume >= LOT:
                partial_volume = round(pos.volume * 0.5, 2)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º 50%
                
                order_type = mt5.ORDER_TYPE_SELL if pos.type == mt5.POSITION_TYPE_BUY else mt5.ORDER_TYPE_BUY
                close_price = tick.bid if order_type == mt5.ORDER_TYPE_SELL else tick.ask
                
                request = {
                    "action": mt5.TRADE_ACTION_DEAL,
                    "symbol": SYMBOL,
                    "volume": partial_volume,
                    "type": order_type,
                    "position": pos.ticket,
                    "price": close_price,
                    "deviation": 50,
                    "magic": 123456,
                    "comment": "Partial close +30 pips",
                    "type_time": mt5.ORDER_TIME_GTC,
                    "type_filling": mt5.ORDER_FILLING_IOC,
                }
                
                result = mt5.order_send(request)
                if result.retcode == mt5.TRADE_RETCODE_DONE:
                    direction = "BUY" if pos.type == mt5.POSITION_TYPE_BUY else "SELL"
                    msg = f"üí∞ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ ({direction}): 50% –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ +{profit_pips:.1f} –ø–∏–ø—Å–∞—Ö"
                    send_telegram_message(msg)
                    logging.info(f"–ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {pos.ticket}: {partial_volume} –ª–æ—Ç–æ–≤ –ø—Ä–∏ +{profit_pips:.1f} –ø–∏–ø—Å–∞—Ö")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {pos.ticket}: {e}")


def get_strategy_signal():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    try:
        return get_signal()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return None


def run():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    global POSITION_TYPE
    
    try:
        initialize_mt5()
        last_ping_time = time.time()

        while True:
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
                POSITION_TYPE = get_current_position()
                
                # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
                if time.time() - last_ping_time >= PING_INTERVAL:
                    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    send_telegram_message(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –í—Ä–µ–º—è: {now}")
                    logging.info("Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    last_ping_time = time.time()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if not is_trading_time():
                    current_hour = datetime.now().hour
                    weekday = datetime.now().weekday()
                    
                    if weekday >= 5:
                        logging.info("üåô –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏. –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                    else:
                        logging.info(f"üåô –í–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ({current_hour}:xx). –û–∂–∏–¥–∞–Ω–∏–µ...")
                    
                    time.sleep(300)  # 5 –º–∏–Ω—É—Ç
                    continue

                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
                if POSITION_TYPE is not None:
                    update_trailing_stop()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
                    check_partial_close()   # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                signal = get_strategy_signal()
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                logging.info(f"üîç –°–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {signal}, –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {POSITION_TYPE}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
                if signal and signal != POSITION_TYPE:
                    logging.info("üìà –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª! –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏...")
                    
                    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                    if POSITION_TYPE is not None:
                        if not close_open_positions():
                            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏")
                            time.sleep(30)
                            continue
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                    time.sleep(2)
                    
                    # –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    if open_trade(signal):
                        POSITION_TYPE = signal
                        logging.info(f"‚úÖ –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {POSITION_TYPE}")
                    else:
                        logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é")
                
                elif signal == POSITION_TYPE and POSITION_TYPE is not None:
                    logging.info("‚û°Ô∏è –°–∏–≥–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é")
                
                elif not signal:
                    logging.info("‚ö™ –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                time.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}"
                logging.error(error_msg, exc_info=True)
                send_telegram_message(error_msg)
                time.sleep(60)

    except Exception as e:
        critical_error = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        logging.error(critical_error, exc_info=True)
        send_telegram_message(critical_error)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        logging.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
        run()
    
    finally:
        if mt5.initialize():
            mt5.shutdown()
            logging.info("üîå MT5 –æ—Ç–∫–ª—é—á–µ–Ω")


if __name__ == "__main__":
    run()