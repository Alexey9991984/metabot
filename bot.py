import numpy as np
import os
import time
import talib
import requests
import MetaTrader5 as mt5
from dotenv import load_dotenv


import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot_errors.log',
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
MT5_LOGIN = int(os.getenv("MT5_LOGIN", 0))
MT5_PASSWORD = os.getenv("MT5_PASSWORD")
MT5_SERVER = os.getenv("MT5_SERVER")

SYMBOL = "EURUSD"
LOT = 0.10
TIMEFRAME = mt5.TIMEFRAME_M1
POSITION_TYPE = None  # 'buy' –∏–ª–∏ 'sell'

mt5.symbol_select(SYMBOL, True)


def send_telegram_message(message):
    if not TELEGRAM_TOKEN or not CHAT_ID:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –≤ .env")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    params = {"chat_id": CHAT_ID, "text": message}
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


def initialize_mt5():
    if not mt5.initialize(login=MT5_LOGIN, password=MT5_PASSWORD, server=MT5_SERVER):
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5: {mt5.last_error()}"
        print(error_msg)
        send_telegram_message(error_msg)
        raise RuntimeError(error_msg)
    print("‚úÖ MetaTrader 5 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    send_telegram_message(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫.")


def get_candles(symbol=SYMBOL, timeframe=TIMEFRAME, n=100):
    rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, n)
    if rates is None or len(rates) == 0:
        msg = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π"
        print(msg)
        send_telegram_message(msg)
        return []
    return np.array(rates)['close']


def close_open_positions():
    positions = mt5.positions_get(symbol=SYMBOL)
    if positions is None or len(positions) == 0:
        return

    symbol_info = mt5.symbol_info(SYMBOL)
    if symbol_info is None:
        send_telegram_message(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {SYMBOL}")
        return

    tick = mt5.symbol_info_tick(SYMBOL)
    if tick is None or tick.bid == 0 or tick.ask == 0:
        send_telegram_message(
            "‚ùå –ù–µ—Ç —Ü–µ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ (tick None –∏–ª–∏ 0)")
        return

    for pos in positions:
        order_type = mt5.ORDER_TYPE_SELL if pos.type == mt5.POSITION_TYPE_BUY else mt5.ORDER_TYPE_BUY
        price = tick.bid if order_type == mt5.ORDER_TYPE_SELL else tick.ask

        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": SYMBOL,
            "volume": pos.volume,
            "type": order_type,
            "position": pos.ticket,
            "price": price,
            "deviation": 50,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            "magic": 123456,
            "comment": "Auto close",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }

        result = mt5.order_send(request)

        if result.retcode == mt5.TRADE_RETCODE_REQUOTE:
            send_telegram_message(
                "‚ùå Requote –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
            time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            result = mt5.order_send(request)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞

        if result.retcode != mt5.TRADE_RETCODE_DONE:
            send_telegram_message(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.retcode}, –æ–ø–∏—Å–∞–Ω–∏–µ: {result.comment}")
        else:
            send_telegram_message("‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")


def open_trade(direction):
    tick = mt5.symbol_info_tick(SYMBOL)
    if tick is None or tick.ask == 0 or tick.bid == 0:
        send_telegram_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")
        return

    symbol_info = mt5.symbol_info(SYMBOL)
    if symbol_info is None or not symbol_info.visible:
        send_telegram_message(f"‚ùå –°–∏–º–≤–æ–ª {SYMBOL} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return

    price = tick.ask if direction == "buy" else tick.bid
    order_type = mt5.ORDER_TYPE_BUY if direction == "buy" else mt5.ORDER_TYPE_SELL

    sl_points = 30
    tp_points = 60
    point = symbol_info.point

    sl = price - sl_points * point if direction == "buy" else price + sl_points * point
    tp = price + tp_points * point if direction == "buy" else price - tp_points * point

    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": SYMBOL,
        "volume": LOT,
        "type": order_type,
        "price": price,
        "sl": sl,
        "tp": tp,
        "deviation": 20,
        "magic": 123456,
        "comment": "Auto SMA Trade",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }

    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        send_telegram_message(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {result.retcode}, –æ—à–∏–±–∫–∞: {mt5.last_error()}")
    else:
        send_telegram_message(
            f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ {'–ø–æ–∫—É–ø–∫–∞' if direction == 'buy' else '–ø—Ä–æ–¥–∞–∂–∞'} –ø–æ {SYMBOL} —Å SL: {sl:.5f}, TP: {tp:.5f}")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞
    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        send_telegram_message(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {result.retcode}, –æ—à–∏–±–∫–∞: {mt5.last_error()}")
    else:
        send_telegram_message(
            f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ {'–ø–æ–∫—É–ø–∫–∞' if direction == 'buy' else '–ø—Ä–æ–¥–∞–∂–∞'} –ø–æ {SYMBOL}")


def strategy():
    global POSITION_TYPE
    close_prices = get_candles()
    if len(close_prices) == 0:
        return

    sma5 = talib.SMA(close_prices, timeperiod=5)
    sma20 = talib.SMA(close_prices, timeperiod=20)

    print(f"SMA5: {sma5[-1]:.6f}, SMA20: {sma20[-1]:.6f}")

    if sma5[-1] > sma20[-1] and sma5[-2] <= sma20[-2]:
        if POSITION_TYPE != "buy":
            close_open_positions()
            open_trade("buy")
            POSITION_TYPE = "buy"
    elif sma5[-1] < sma20[-1] and sma5[-2] >= sma20[-2]:
        if POSITION_TYPE != "sell":
            close_open_positions()
            open_trade("sell")
            POSITION_TYPE = "sell"


def run():
    try:
        initialize_mt5()
        while True:
            strategy()
            time.sleep(60)
    except Exception as e:
        error_message = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        send_telegram_message(error_message)
        logging.error(error_message, exc_info=True)

    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    try:
        initialize_mt5()
        send_telegram_message("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MetaTrader 5...")
    except Exception as reconnect_error:
        reconnect_message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {reconnect_error}"
        send_telegram_message(reconnect_message)
        logging.error(reconnect_message, exc_info=True)

    time.sleep(60)


if __name__ == "__main__":
    run()
